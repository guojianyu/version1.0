1:首先判断系统，决定使用相应的定时模块
2：其次判断系统的模块，然后选择相应的引擎（mongo,redis）
3:持续扫描任务，加入工作队列（状态为0的是没有加入工作队列的）
4：定时执行
5：添加到相应的队列
6：执行器取任务

#####################################################################################################
由于aps受进程数的制约，同一时间下发的任务不可能大于它设置的进程数，为了避免同一时间密集的任务错失执行时间，解决方案
一天  86400s
假设有200w个任务，平均每秒要执行大约23个任务
任务太多可以选择多布置客户端。任务得不到执行就分配给其他设备
每秒执行的任务数，就等于我们要开启的进程数，设备够好可以选择改变aps的进程数
进程数 = 总任务数／86400
同一时间任务密集只能通过增加客户端来解决

#####################################################################################################
def my_listener(event):
    if event.exception:
        #print ( str(event.job))
        print (event,type(event))
        print('The job crashed :(')
    else:
        print('The job worked :)')

scheduler.add_listener(my_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)


ERROR.txt 是错误记录错误日志的文件


本地任务和作业的操作接口通讯格式：
     #此接口主要负责操作本地任务列表和作业
    # 1.'command':'add',”task”:{} ，type= "task/job"  任务操作／作业操作
    # 2."command":"del"id“:’’,type= "task/job"
    # 3."command":"update",”content”:{},type= "task/job"
    # 4."command":'pop',”find”:’’,type= "task/job"

    作业的接口通讯格式：
    在任务的基础上增加了两个功能：
    'command':'pause',”id”: ，type= "task/job"  任务操作／作业操作#暂停任务
    'command':'resume',”id”: ，type= "task/job"  任务操作／作业操作#回复任务


关于apscheduler_client 目录结构说明：
下面的目录都可以自由的分割组合，并且可以在不同的设备上分割



apscheduler_client 任务调度中心的所有逻辑代码块
                  |-------aps_client（客户端总程序入口） 任务调度中心的主要逻辑，下面的文件的功能都被此文件添加作为本地任务
                  |
                  |-------request_server 向服务器请求的主要逻辑（zmq 实现）
                  |
apscheduler_client|--------system_info  获取系统信息
                  |
                  |---------获取代理（预留）
                  |
                  |---------获取cookie（预留）
                  |
                  |---------request_server1 向服务器请求的主要逻辑（web实现）

