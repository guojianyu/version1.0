一：向中间层获取任务的请求格式与中间层的返回格式

    向中间层获取任务格式：
    req = {'type':'get_task/get_size'''topic': 任务类型, 'count': 期望得到的任务个数}
    type ：包含get_task和get_size
        get_task类型代表得到任务，topic指定类型，count期望得到的任务个数
        get_size代表得到队列长度，topic指定类型  count不关心。如果没有该类型的topic则返回'invalid queue'
    #中间层返回的任务格式：
    得到任务会返回：
        【task1,task2,task3】是一个以单个任务为一个元素的链表
    没有任务会返回：
        【】空链表

二：生成的本地任务说明：
注：只要是本地生成的任务，任务格式都统一如下。它们只是在不同的阶段更改不同的属性，和填充不同属性的值。
本地任务属性：
local_task = {

                             'topic':'jm_crawl',
                             'guid':'',#沿用服务器下发的任务id
                             'body':
                                    {
                                     'crawl':{'name':'','version':''},
                                     'urls':[url,url],#该url对应的下边执行器返回的数据格式
                                     'abstime':'',
                                        #content主要是一组任务共有的关键信息
                                     'content':{
                                                #lib 期望使用的抓取器，bulk是否一起发送
                                                'proxymode':'auto','encode':'utf-8',
                                                'lib':'aiohttp','max_retry':0,'bulk':False,
                                                'cookie':'','debug':False,'usephantomjs':False,

                                               },
                                    'result':[],#{'url': '', 'time': '', 'html': '', 'error': '', 'proxy': '', 'retry': 0, 'headers': '', 'other': '', 'sucess': False, 'platform': ''}
                                    'parsing_data':[],
                                    'callback':{"topic":'parsing',},
                                    }


             }


执行器返回的数据格式：

url = {

    "url": {
        'callback':{}
        "topic":'parsing',
        "guid":task['guid'],
        "task_count":url_count,
        "url": "https://so.m.jd.com/ware/searchList.action",
        "useproxy": "",
        "platform": "jd_app",
        "sort":,
        "page":,
        "header": {
            "content-length": "59",
            "accept-encoding": "gzip, deflate, sdch",
            "x-requested-with": "XMLHttpRequest",
            "user-agent": "Mozilla/4.0 (MobilePhone SCP-PRO700/US/1.0) NetFront/3.4 MMP/2.0",
            "connection": "keep-alive",
            "accept": "application/json",
            "accept-language": "zh-CN,zh;q=0.8",
            "origin": "https://so.m.jd.com",
            "content-type": "application/x-www-form-urlencoded",
            "referer": "https://so.m.jd.com/products/9987-830-866.html"
        },
        "data": {
            "categoryId": "9987",
            "c2": "866",
            "c1": "830",
            "_format_": "json",
            "page": 15,
            "sort": "",
            "stock": 0
        },
        "method": "POST"
    },
    "result":[{'url': '', 'time': '', 'html': '',  'retry': 0,'sucess': False},]
}

本地任务：
local_task['body']下的urls,result,parsing_data都是链表，它们都一一对应.
urls的值是执行器进行填充的
result的值是抓取器进行填充的
parsing_data的值是解析器进行填充的

阶段性值的详细说明：（待补充）
1：执行器相关：
  生成过程：
    服务器任务------》本地抓取任务
  相关的任务属性：
    urls:生成的一组抓取任务都会填充到该字段
2:抓取器相关：
   生成过程：
     本地抓取任务-----》解析任务
   相关的任务属性：
     result:生成的一组解析任务相关都会填充到该字段
     local_task['body']['content']['lib'] 该字段是表示期望使用的抓取器。抓取器目前提供requests模块和aiohttp，requests无法利用异步的优势,所以建议使用aiohttp
3：解析器相关：
    生成过程：
     解析任务-----》发送任务
   相关的任务属性：
     parsing_data:生成的一组发送任务相关都会填充到该字段

